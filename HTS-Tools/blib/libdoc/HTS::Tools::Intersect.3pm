.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Intersect 3"
.TH HTS::Tools::Intersect 3 "2017-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Intersect \- Intersect small genomic regions files, usually results from peak callers.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A pure perl module to calculate intersection between bed files (can contain as many additional columns 
as desired, as long as the first 3 are chromosome, start, end). It requires as input only the bed files 
and returns the overlap regions between the first and the second file. However, if fileA and fileB are 
intersected, the final file containing name \s-1OVERLAP..\s0.fileA output will  contain regions from fileA 
that overlap with regions of fileB and the final file containing name \s-1OVERLAP...B\s0 will contain those 
regions from fileB. The _ONLY files contain regions only in fileA or only in fileB, when performing  the 
intersection of fileA and fileB. The actions performed are similar to those of the \s-1UCSC\s0 Table Browser, 
and BEDTools intersecting functions, at similar speed and more convenience! This module can be safely
used when the user wants to maintain several precalculated statistics, e.g. the average number of reads
per specified window size under a peak region, something which is not currently possible using BEDTools.
Intersection can be done at specific overlap percentages or any overlap (like Table Browser, default, 1bp).
In addition, one can specify an array of percentages so that various overlaps and overlap percentages can
be calculated in a batch mode to answer questions like 'is there an overlap saturation between my two peak
sets?' Extension from a point (e.g. the peak mode) towards both directions is also possible as long as a
column with this point (the peak 'summit') is given in both files and the appropriate option is used.
The user has the option to retrieve only certain of the four available output file types. The user has the
option to retrieve only certain of the four available output file types. Stats are also displayed and the
distances between overlapping and limited non-overlapping regions can be returned.
.PP
.Vb 8
\&    use HTS::Tools::Intersect;
\&    my %params1 = (
\&        \*(AqinputA\*(Aq => \*(Aqnormal_nfkb_peaks.txt\*(Aq,
\&        \*(AqinputB\*(Aq => \*(Aqdisease_nfkb_peaks.txt\*(Aq,
\&        \*(Aqany\*(Aq => 1
\&    )
\&    my $intersecter = HTS::Tools::Count\->new(\e%params1);
\&    $intersecter\->run;
\&    
\&    my %params2 = (
\&        \*(AqinputA\*(Aq => \*(Aqnormal_nfkb_peaks.txt\*(Aq,
\&        \*(AqinputB\*(Aq => \*(Aqdisease_nfkb_peaks.txt\*(Aq,
\&        \*(Aqpercent\*(Aq => 0.5,
\&        \*(Aqextend\*(Aq => [4,100],
\&        \*(Aqboth\*(Aq => 1,
\&        \*(Aqoutput\*(Aq => [\*(AqoverlapA\*(Aq,\*(AqonlyA\*(Aq,\*(AqonlyB\*(Aq],
\&        \*(Aqwaitbar\*(Aq => 1
\&    )
\&    $intersecter\->change_params(\e%params2);
\&    $intersecter\->run;
.Ve
.PP
The acceptable parameters are as follows:
.IP "\fIinputA\fR \fB(required)\fR" 4
.IX Item "inputA (required)"
First input BED-like file
.IP "\fIinputB\fR \fB(required)\fR" 4
.IX Item "inputB (required)"
Second input BED-like file
.IP "\fIsort\fR \fB(optional)\fR" 4
.IX Item "sort (optional)"
Use this option to sort the input files first. This is not necessary but the module runs slighlty faster
if the files are sorted beforehand.
.IP "\fIpercent\fR \fB(optional)\fR" 4
.IX Item "percent (optional)"
The overlap percentage between the two files. It should be a value between 0 and 100. Alternatively, the
overlap percentage can be a series of values. In this case the program will run as a batch procedure, 
calculating the number of overlapping regions for the determined output types for each given percentage, 
creating and writing as output the distribution of the number of overlapping regions. In this case, no 
other output files are produced. Instead of a series of numbers, it can be an element in the format a:b 
where a is the starting percentage and b the ending. A list between a and b sith interval 1 will be 
autogeneratied. This options does not work with \-\-any option. Examples are \fIpercent\fR => 50, \fIpercent\fR => 
10 20 30 40 50, \fIpercent\fR => 1:100.
.IP "\fIany\fR \fB(optional)\fR" 4
.IX Item "any (optional)"
Use this switch for returning regions with any (at least 1bp) overlap between fileA and fileB. When used, 
\&\fIpercent\fR is ignored. This is the default (1).
.IP "\fIextend\fR \fB(optional)\fR" 4
.IX Item "extend (optional)"
Use this option to supply the program the upstream and downstream extension length. It should be two 
numbers, the first the number of bps to extend upstream of peak center and the second to extend downstream. 
Use this option in combination with \fImode\fR option. For example \fIextend\fR => [100,200].
.IP "\fIautoextend\fR \fB(optional)\fR" 4
.IX Item "autoextend (optional)"
Use this switch to calculate half of the median peak length which will then be used for extending from 
peak mode. Use this switch in combination with \fImode\fR option to provide the column with the peak mode
in the input files
.IP "\fImode\fR \fB(optional)\fR" 4
.IX Item "mode (optional)"
Use this option to supply the program the column in both fileA and fileB that contains the peak mode 
or any point from which extension to left and right will start. E.g. \fImode\fR => 4. This parameter has 
to be provided when \fIextend\fR => 1 and/or \fIautoextend\fR => 1 are used. Also when overpairs is chosen 
as an output format.
.IP "\fIboth\fR \fB(optional)\fR" 4
.IX Item "both (optional)"
Normally, when overlaping fileA with fileB at a percentage level, if the tag of the fileA overlaps with 
tag(s) from fileB, this percentage will be calculated based on tag from fileA. That is, if the required 
percentage is p and the overlap is d, then if d < p*length(regionA) then there is no overlap. However, if
region B is smaller than regionA it could d > p*length(regionB), so there is p percent overlap between 
region A and region B when using the length of region B. This option allows for such comparisons by checking
both cases and returning a positive overlap if one of the above two is true. This swicth is useless when 
used with \fIextend\fR option and ignored.
.IP "\fIexact\fR \fB(optional)\fR" 4
.IX Item "exact (optional)"
Use this switch to calculate overlaps based on exact genomic locations rather than when a region is 
\&\*(L"totally\*(R" included inside the other, when performing overlaps based on percentages. For example if 
overlaping fileA with fileB, if a region in fileA starts at 300 and ends at 800 and the overlaping region
in fileB starts at 500 and ends at 700, if using the \fIexact\fR swicth, a 50% percent overlap will not 
return this region as positive because (700\-500)<0.5*(800\-300) even if region B is totally included in 
region A. This switch forces the program to calculate percent overlaps exactly as the \s-1UCSC\s0 Table Browser.
Can also be used in combination with the \fIboth\fR switch.
.IP "\fIreportonce\fR \fB(optional)\fR" 4
.IX Item "reportonce (optional)"
Use this option to report only once regions from one file that may overlap multiple times from regions in
the other file (this happens for example with BEDTools). Such situations may arise when for example there
is a broad peak in fileA which is split in two peaks in fileB.
.IP "\fIgap\fR \fB(optional)\fR" 4
.IX Item "gap (optional)"
Use this option to retrieve distances between non-overlaping (according to specified criteria) regions 
that is not larger than the number specified with the \fIgap\fR option. Can be useful with onlyA and nonpairs
output options. The default gap is set to 0 so the option is not used. If you wish to use that option 
you should provide a positive integer, for example \fIgap\fR => 10000.
.IP "\fIoutput\fR \fB(optional)\fR" 4
.IX Item "output (optional)"
Use this option to determine which intersection output filetypes you wish to retrieve.  Possible choices 
are: \*(L"overlapA\*(R" for retrieving regions from fileA that overlap with fileB. \*(L"overlapB\*(R" for retrieving 
those regions that overlap was found with fileA regions when using  fileA as first input (\s-1ATTENTION\s0! 
\&\s-1NOT REGIONS FROM\s0 fileB \s-1THAT OVERLAP WITH\s0 fileA). \*(L"onlyA\*(R" for retrieving regions from fileA that \s-1DO NOT \s0
overlap with regions in fileB. \*(L"onlyB\*(R" for retrieving those regions that overlap was \s-1NOT\s0 found with fileA 
when using fileA as first input (\s-1ATTENTION\s0! \s-1SAME BEHAVIOUR AS \s0\*(L"overlapB\*(R" choice). Two more possible choices
are \*(L"overpairs\*(R" and \*(L"nonpairs\*(R". These will return a file with concatenated regions from fileA and fileB
(similar to the \s-1BEDPE\s0 format of BEDTools) with additional columns that represent:
a. in the case of \*(L"overpairs\*(R", statistics about the distances of regions found to be overlapping between
fileA and fileB (the statistics depend on the \fIextend\fR, \fIautoextend\fR, \fIpercent\fR and \fImode\fR options.
For example, if \fImode\fR and \fIextend\fR are given, the distances are from the centers of the regions while
in any other case, all the distances from the start, end and center of regions are reported.
b. in the case of \*(L"nonpairs\*(R", the distances from non-overlapping regions are reported, if the non-overlapping
regions fall in a range of \fIgap\fR upstream and downstream (where \fIgap\fR must be specified). The maximum
number of non-overlapping regions is defined by the \fImaxud\fR parameter.
.IP "\fImaxud\fR" 4
.IX Item "maxud"
Use this option to define the maximum number of non-overlapping regions that will be reported using the
\&\*(L"nonpairs\*(R" option of \fIoutput\fR parameter, within an upstream/downstream region defined by the \fIgap\fR input
parameter.
.IP "\fIkeeporder\fR \fB(optional)\fR" 4
.IX Item "keeporder (optional)"
Use this parameter if you want to force the lines of the output files to be in the same order (e.g. sorted 
per chromosome or gene name) as the input files. This is accomplished through the module Tie::IxHash::Easy
which must be present in your machine. If the module is not present, the \fIkeeporder\fR option is deactivated.
Keep in mind that maintaining the order requires slighlty more memory during runtime.
.IP "\fIdryrun\fR \fB(optional)\fR" 4
.IX Item "dryrun (optional)"
Use this option if you wish to do a \*(L"dry-run\*(R", that is just display statistics about chosen overlaps and
not write any output files.
.IP "\fIwaitbar\fR \fB(optional)\fR" 4
.IX Item "waitbar (optional)"
Use this option if you wish to display a simple progress bar while running the procedures. For small 
files it is probably useless as the program finishes very quickly.
.IP "<silent>" 4
.IX Item "<silent>"
Use this option if you want to turn informative messages off.
.SH "OUTPUT"
.IX Header "OUTPUT"
The main output of the module is up to four files in \s-1BED\s0 format containing also any additional data 
columns.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
The HTS::Tools::Intersect object constructor. It accepts a set of parameters that are required to run
the counter and get the output.
.PP
.Vb 1
\&    my $intersecter = HTS::Tools::Intersect\->new({\*(AqinputA\*(Aq => \*(AqmyfileA.bed\*(Aq,\*(AqinputB\*(Aq => \*(AqmyfileB.bed\*(Aq});
.Ve
.SS "init"
.IX Subsection "init"
HTS::Tools::Intersect object initialization method. \s-1NEVER\s0 use this directly, use new instead.
.SS "run"
.IX Subsection "run"
The HTS::Tools::Intersect run subroutine. It runs the interssecter with the given parameters in the 
constructor.
.PP
.Vb 1
\&    $intersecter\->run;
.Ve
.SS "make_onlyB_tree"
.IX Subsection "make_onlyB_tree"
Make an interval tree out of a hash storing intervals to exclude from an original file. This is just a hack as the current IntervalTree
implementation in pure Perl does not have a remove function. Internal use.
.PP
.Vb 1
\&    $intersecter\->make_onlyB_tree(\e%onlyB);
.Ve
.SS "read_input"
.IX Subsection "read_input"
Read an input file and create an Interval Tree. Internal use.
.PP
.Vb 1
\&    $intersecter\->read_input($file);
.Ve
.SS "print_itree_output"
.IX Subsection "print_itree_output"
Module specific output printing function. Internal use.
.PP
.Vb 1
\&    $intersecter\->print_itree_output($A,$B,$output_type,$header,$the_hash);
.Ve
.SS "print_array"
.IX Subsection "print_array"
Module specific output printing function. Internal use.
.PP
.Vb 1
\&    $intersecter\->print_array($A,$B,$output_type,@array);
.Ve
.SS "search_any"
.IX Subsection "search_any"
Binary search algorithm for any overlap between genomic regions. Internal use.
.PP
.Vb 1
\&    $intersecter\->search_any($start,$end,@candidate_areas);
.Ve
.SS "search_percent"
.IX Subsection "search_percent"
Binary search algorithm for percent overlap between genomic regions. Internal use.
.PP
.Vb 1
\&    $intersecter\->search_percent($start,$end,$percentage,@candidate_areas);
.Ve
.SS "search_any_center"
.IX Subsection "search_any_center"
Binary search algorithm for any overlap between genomic regions using their centers. Internal use.
.PP
.Vb 1
\&    $intersecter\->search_any_center($mode,$position,$downstream,$upstream,@candidate_areas);
.Ve
.SS "search_any_center"
.IX Subsection "search_any_center"
Binary search algorithm for percentage overlap between genomic regions using their centers. Internal use.
.PP
.Vb 1
\&    $intersecter\->search_percent_center($mode,$position,$downstream,$upstream,$percentage,@candidate_areas);
.Ve
.SS "search_percent_both"
.IX Subsection "search_percent_both"
Binary search algorithm for percentage overlap between genomic regions for the \*(L"both\*(R" case. Internal use.
.PP
.Vb 1
\&    $intersecter\->search_any_center($start,$end,$percentage,@candidate_areas);
.Ve
.SS "search_percent_exact"
.IX Subsection "search_percent_exact"
Binary search algorithm for percentgae overlap between genomic regions for the \*(L"exact\*(R" case. Internal use.
.PP
.Vb 1
\&    $intersecter\->search_percent_exact($start,$end,$percentage,@candidate_areas);
.Ve
.SS "search_percent_both"
.IX Subsection "search_percent_both"
Binary search algorithm for percentage overlap between genomic regions for the \*(L"exact\*(R" and \*(L"both\*(R" case.
Internal use.
.PP
.Vb 1
\&    $intersecter\->search_percent_both($start,$end,$percentage,@candidate_areas);
.Ve
.SS "dists_every"
.IX Subsection "dists_every"
Distance calculation subroutine using Interval Tree nodes. Internal use.
.PP
.Vb 1
\&    $intersecter\->dists_every($A,$B,$ei);
.Ve
.SS "dists_every"
.IX Subsection "dists_every"
Distance calculation subroutine using centers and Interval Tree nodes. Internal use.
.PP
.Vb 1
\&    $intersecter\->dists_center($A,$B,$ei,$up,$down);
.Ve
.SS "node2text"
.IX Subsection "node2text"
Collapse a node of a genomic interval tree to text. Internal use.
.PP
.Vb 1
\&    $intersecter\->node2text($itree_node);
.Ve
.SS "chrom_itree_size"
.IX Subsection "chrom_itree_size"
Get the size of a chromosome hash of Interval Trees. Internal use.
.PP
.Vb 1
\&    $intersecter\->chrom_itree_size(\e%chrom_tree_hash);
.Ve
.SS "get_lengths"
.IX Subsection "get_lengths"
Get lengths of input genomic regions as hash of Interval Trees. Internal use.
.PP
.Vb 1
\&    $intersecter\->get_lengths(\e%chrom_tree_hash);
.Ve
.SS "strand_hash"
.IX Subsection "strand_hash"
Initiate a hash with strand representations. Internal use.
.PP
.Vb 1
\&    $intersecter\->strand_hash;
.Ve
.SS "create_output_file"
.IX Subsection "create_output_file"
Create the name of the output file according to output type. Internal use.
.PP
.Vb 1
\&    $intersecter\->create_output_file($A,$B,$output_type);
.Ve
.SS "sort_inputs"
.IX Subsection "sort_inputs"
Input file sorting function. Internal use.
.SS "change_params"
.IX Subsection "change_params"
Massively change the parameters of an HTS::Tools::Intersect object.
.PP
.Vb 2
\&    $intersecter\->change_params({\*(Aqinput\*(Aq => \*(Aqanother_file\*(Aq,\*(Aqregion\*(Aq => \*(Aqmouse\-exon\*(Aq})
\&    $intersecter\->run;
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Intersect object getter
.PP
.Vb 1
\&    my $param_value = $count\->get(\*(Aqparam_name\*(Aq);
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Intersect object setter
.PP
.Vb 1
\&    $intersecter\->set(\*(Aqparam_name\*(Aq,\*(Aqparam_value\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Intersect
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
