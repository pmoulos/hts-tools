.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Track::Signal 3"
.TH HTS::Tools::Track::Signal 3 "2015-09-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Track::Signal \- Conver among several NGS track formats with visualization purposes.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is
.PP
.Vb 12
\&    use HTS::Tools::Track::Signal;
\&    my %params = (
\&        \*(Aqinput\*(Aq => \*(Aqwt.bam\*(Aq
\&        \*(Aqsource\*(Aq => \*(Aqbam\*(Aq,
\&        \*(Aqdestination\*(Aq => \*(Aqbigwig\*(Aq,
\&        \*(Aqoptions\*(Aq => (
\&            \*(Aqcolor\*(Aq => \*(Aq0,160,0\*(Aq,
\&            \*(Aqvisbility\*(Aq => \*(Aqdense\*(Aq
\&        )
\&    )
\&    my $track = HTS::Tools::Track::Signal\->new(\e%params);
\&    $track\->run;
.Ve
.PP
The acceptable parameters are as follows:
.IP "\fIinput\fR \fB(required)\fR" 4
.IX Item "input (required)"
Ipse deus
.IP "\fIsource\fR \fB(required)\fR" 4
.IX Item "source (required)"
Velox discurrere
.IP "\fIdestination\fR \fB(required)\fR" 4
.IX Item "destination (required)"
Gaudet
.IP "\fIdir\fR \fB(optional)\fR" 4
.IX Item "dir (optional)"
In altis montibus
.IP "\fIurlbase\fR \fB(required when destination is bigbed, bigwig, bam)\fR" 4
.IX Item "urlbase (required when destination is bigbed, bigwig, bam)"
Et subitas
.IP "\fIorg\fR \fB(required when destination is bigbed, bigwig, wig, bedgraph)\fR" 4
.IX Item "org (required when destination is bigbed, bigwig, wig, bedgraph)"
Concipit
.IP "\fIgversion\fR \fB(required when destination is bigbed, bigwig, wig, bedgraph)\fR" 4
.IX Item "gversion (required when destination is bigbed, bigwig, wig, bedgraph)"
Ipse fugas
.IP "\fIcleanlevel\fR \fB(optional)\fR" 4
.IX Item "cleanlevel (optional)"
The cleanlevel parameter controls what filtering will be applied to the raw reads so as to produce
the signal track. It can have three values: 0 for not cleaning anything (reporting reads as they
are, no unique and no removal of unlocalized regions and mitochondrial \s-1DNA\s0 reads), 1 for removing
unlocalized regions (chrU, hap, random etc.), 2 for removing reads of level 1 plus mitochondrial
reads (chrM) and 3 for removing reads of level 2 plus returning unique reads only. The default is
level 1.
.IP "\fIsort\fR \fB(optional)\fR" 4
.IX Item "sort (optional)"
Sort the \s-1BAM\s0 or \s-1BED\s0 files according to co-ordinates. This process is required for some conversions
so if you do not supply this parameter, make sure that the source tracks are sorted.
.IP "\fIoptions\fR \fB(optional)\fR" 4
.IX Item "options (optional)"
Ipse Deus
.IP "\fIsilent\fR \fB(optional)\fR" 4
.IX Item "silent (optional)"
Use this parameter if you want to turn informative messages off.
.SH "OUTPUT"
.IX Header "OUTPUT"
The output of the module is usually a \s-1UCSC\s0 Genome Browser track.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
The HTS::Tools::Track::Signal object constructor. It accepts a set of parameters that are required to run the
motifscanner and get the output.
.PP
.Vb 2
\&    my $track = HTS::Tools::Track::Signal\->new({\*(Aqinput\*(Aq => \*(Aqwt.bam\*(Aq,\*(Aqoutput\*(Aq => \*(Aqwt.wig\*(Aq,
\&        options => {\*(Aqcolor\*(Aq => \*(Aq0,160,0\*(Aq}});
.Ve
.SS "init"
.IX Subsection "init"
HTS::Tools::Track::Signal object initialization method. \s-1NEVER\s0 use this directly, use new instead.
.SS "run"
.IX Subsection "run"
The HTS::Tools::Track::Signal run subroutine. It runs the track converter with the given parameters in the 
constructor.
.PP
.Vb 1
\&    $track\->run;
.Ve
.SS "bam2bedgraph"
.IX Subsection "bam2bedgraph"
bam2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bam2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bam2bedgraph"
.IX Subsection "bam2bedgraph"
bam2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bam2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bam2bigbed"
.IX Subsection "bam2bigbed"
bam2bigbed converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bam2bigbed($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bam2bigwig"
.IX Subsection "bam2bigwig"
bam2bigwig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bam2bigwig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bam2wig"
.IX Subsection "bam2wig"
bam2wig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bam2wig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bed2bam"
.IX Subsection "bed2bam"
bed2bam converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bed2bam($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bed2bedgraph"
.IX Subsection "bed2bedgraph"
bed2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bed2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bed2bigbed"
.IX Subsection "bed2bigbed"
bed2bigbed converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bed2bigbed($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bed2bigwig"
.IX Subsection "bed2bigwig"
bed2bigwig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bed2bigwig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bed2wig"
.IX Subsection "bed2wig"
bed2wig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bed2wig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bedgraph2bigwig"
.IX Subsection "bedgraph2bigwig"
bedgraph2bigwig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bedgraph2bigwig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bedgraph2wig"
.IX Subsection "bedgraph2wig"
bedgraph2wig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bedgraph2wig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bigbed2bam"
.IX Subsection "bigbed2bam"
bigbed2bam converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bigbed2bam($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bigbed2bed"
.IX Subsection "bigbed2bed"
bigbed2bed converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bigbed2bed($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bigbed2bedgraph"
.IX Subsection "bigbed2bedgraph"
bigbed2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bigbed2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bigbed2bigwig"
.IX Subsection "bigbed2bigwig"
bigbed2bigwig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bigbed2bigwig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bigwig2bedgraph"
.IX Subsection "bigwig2bedgraph"
bigwig2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bigwig2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "bigwig2wig"
.IX Subsection "bigwig2wig"
bigwig2wig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->bigwig2wig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "sam2bam"
.IX Subsection "sam2bam"
sam2bam converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->sam2bam($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "sam2bedgraph"
.IX Subsection "sam2bedgraph"
sam2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->sam2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "sam2bigbed"
.IX Subsection "sam2bigbed"
sam2bigbed converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->sam2bigbed($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "sam2bigwig"
.IX Subsection "sam2bigwig"
sam2bigwig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->sam2bigwig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "sam2wig"
.IX Subsection "sam2wig"
sam2wig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->sam2wig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "wig2bigwig"
.IX Subsection "wig2bigwig"
wig2bigwig converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->wig2bigwig($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "wig2bedgraph"
.IX Subsection "wig2bedgraph"
wig2bedgraph converter using 3rd party tools.
.PP
.Vb 1
\&    $track\->wig2bedgraph($input,$dir,$org,\e%options);
.Ve
.PP
The subroutine outputs the filename of the new track and its header when needed.
.SS "check_constants"
.IX Subsection "check_constants"
Check if required 3rd party tools exist for the required conversion. Internal use.
.PP
.Vb 1
\&    $signaler\->check_constants("sam","bigwig");
.Ve
.SS "clean_bedstar"
.IX Subsection "clean_bedstar"
Helper cleaning/sorting function for BED-like files (bed, bedgraph). Internal use.
.PP
.Vb 1
\&    $track\->sort_bedstar($file,$cleanlevel,$sort);
.Ve
.SS "get_chrom_size"
.IX Subsection "get_chrom_size"
Fetch/find in path a file containing the size of each chromosome, according to the requested organism
and genome version.
.PP
.Vb 1
\&    $track\->get_chrom_size($organism,$version);
.Ve
.SS "format_igenomes"
.IX Subsection "format_igenomes"
Construct a string representing with the correct nomenclature, species for each supported iGenomes
chromosomal size annotation. Mostly for internal use.
.PP
.Vb 1
\&    $track\->format_igenomes($organism,$version);
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Track::Signal object getter.
.PP
.Vb 1
\&    my $param_value = $motifscanner\->get(\*(Aqparam_name\*(Aq)
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Track::Signal object setter.
.PP
.Vb 1
\&    $motifscanner\->set(\*(Aqparam_name\*(Aq,\*(Aqparam_value\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Track::Signal
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 80:" 4
.IX Item "Around line 80:"
You forgot a '=back' before '=head1'
