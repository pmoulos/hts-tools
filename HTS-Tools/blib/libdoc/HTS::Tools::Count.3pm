.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Count 3"
.TH HTS::Tools::Count 3 "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Count \- Count short sequence reads in genomic regions
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Program to count reads in bed file(s) over specific genomic regions in a genome and count. It also 
addresses the problem of partial overlaping between a read and a genomic regions by 3 possible ways:
.IP "\(bu" 4
a. By providing an overlaping coefficient between 0 and 1, the program adds a read into a genomic region 
if the part of the read within the boundaries (start or end) of the genomic region is >= coefficient*read length. 
For example, if a read has length 200 and the overlaping coefficient is 0.9, then 0.9*200 = 180 bases 
should be within the region boundaries to be included in that region. This should provide more accuracy 
when having large reads. It can be used in the case of small reads too, but lucks automation. It can
also split each genomic region in bins of constant length and count reads in individual bins and calculate
several statistics for each genomic region based on the bin stats.
.IP "\(bu" 4
b. By using a linear probabilistic score. In this case, if a read is located half inside a region, it
is added up to that region, else a score is calculated for the read based on the formula: score = #bps 
inside region/(length of read/2). This score lies between 0 and 1 and it is compared to a uniform random 
number p between 0 and 1. If p<score then this tag is added up to the genomic region else discarded. 
This scoring scheme should be used with reads of small length and should be avoided in the case of 
large reads because of causing possible under-representation in promoter regions, in case one wishes 
to summarize reads in gene regions. However it could perform well when studying promoter or binding regions.
.IP "\(bu" 4
c. By using an exponential probabilistic score. This case, works as case (b) but the scoring function 
is score = exp(\-c^2/#bps inside region) where c is constant. The constant c determines the steepness 
of the score. The lower the value is, the higher is the probability to include in the region tags whose
larger part lies outside the region. This scoring scheme should be used with reads of small length and
for reasons similar to those of (b) but would maybe perform better when used in promoter or binding regions.
.PP
Apart from the bed files, the program requires also a bed file (3 first columns should be chromosome, 
start, end and the 4th a \s-1UNIQUE\s0 region identification, e.g. Ensembl \s-1ID,\s0 could also contain further 
information in extra columns) which contains the genomic regions of interest, in which number of reads 
should be summarized. The program returns bed file(s) that contain the provided genomic regions with 
any other information together with read counts per region. The region file can be automatically downloaded
among a variety of predefined regions from Ensembl, \s-1UCSC\s0 or RefSeq. More documentation to come...
.PP
.Vb 9
\&    use HTS::Tools::Count;
\&    my %params = (
\&        \*(Aqinput\*(Aq => [\*(Aqnormal_pol2.bed\*(Aq,\*(Aqdisease_pol2.bed\*(Aq],
\&        \*(Aqregion\*(Aq => \*(Aqhuman\-gene\*(Aq,
\&        \*(Aqsource\*(Aq => \*(Aqucsc\*(Aq,
\&        \*(Aqsplit\*(Aq => 1000
\&    )
\&    my $counter = HTS::Tools::Count\->new(\e%params);
\&    $counter\->run;
.Ve
.PP
The acceptable parameters are as follows:
.IP "\fIinput\fR \fB(required)\fR" 4
.IX Item "input (required)"
Input file(s). The input bed files can be 3, 6 or n column bedfiles, only the first 3 are used. More
formats will be added soon.
.IP "\fIregion\fR \fB(required)\fR" 4
.IX Item "region (required)"
Genomic regions file. The first 3 columns should be of the same structure as in bed files. The 4th 
column should contain a \s-1UNIQUE\s0 identifier for each region (e.g. Ensembl IDs). The rest columns can 
contain additional data about the regionsn (e.g. annotation elements, descriptions etc.). Instead of 
a local file, it can be one of the following, which will automatically download and use genomic regions 
from the source defined by the \fIsource\fR parameter:
.Sp
\&\*(L"human-gene\*(R" for homo sapiens gene co-ordinates
\&\*(L"human-exon\*(R" for homo sapiens exon co-ordinates
\&\*(L"human\-5utr\*(R" for homo sapiens 5'\s-1UTR\s0 co-ordinates
\&\*(L"human\-3utr\*(R" for homo sapiens 3'\s-1UTR\s0 co-ordinates
\&\*(L"human-cds\*(R" for homo sapiens \s-1CDS\s0 co-ordinates
\&\*(L"mouse-gene\*(R" for mus musculus gene co-ordinates
\&\*(L"mouse-exon\*(R" for mus musculus exon co-ordinates
\&\*(L"mouse\-5utr\*(R" for mus musculus 5'\s-1UTR\s0 co-ordinates
\&\*(L"mouse\-3utr\*(R" for mus musculus 3'\s-1UTR\s0 co-ordinates
\&\*(L"mouse-cds\*(R" for mus musculus \s-1CDS\s0 co-ordinates
\&\*(L"rat-gene\*(R" for rattus norvegicus gene co-ordinates
\&\*(L"rat-exon\*(R" for rattus norvegicus exon co-ordinates
\&\*(L"rat\-5utr\*(R" for rattus norvegicus 5'\s-1UTR\s0 co-ordinates
\&\*(L"rat\-3utr\*(R" for rattus norvegicus 3'\s-1UTR\s0 co-ordinates
\&\*(L"rat-cds\*(R" for rattus norvegicus \s-1CDS\s0 co-ordinates
\&\*(L"fly-gene\*(R" for drosophila melanogaster gene co-ordinates
\&\*(L"fly-exon\*(R" for drosophila melanogaster exon co-ordinates
\&\*(L"fly\-5utr\*(R" for drosophila melanogaster 5'\s-1UTR\s0 co-ordinates
\&\*(L"fly\-3utr\*(R" for drosophila melanogaster 3'\s-1UTR\s0 co-ordinates
\&\*(L"fly-cds\*(R" for drosophila melanogaster \s-1CDS\s0 co-ordinates
\&\*(L"zebrafish-gene\*(R" for danio rerio gene co-ordinates
\&\*(L"zebrafish-exon\*(R" for danio rerio exon co-ordinates
\&\*(L"zebrafish\-5utr\*(R" for danio rerio 5'\s-1UTR\s0 co-ordinates
\&\*(L"zebrafish\-3utr\*(R" for danio rerio 3'\s-1UTR\s0 co-ordinates
\&\*(L"zebrafish-cds\*(R" for danio rerio \s-1CDS\s0 co-ordinates
.IP "\fIsource\fR \fB(optional)\fR" 4
.IX Item "source (optional)"
Use this option to set the online data source in the case of selecting one of the predefined region 
templates with \fIregion\fR. It can be one of \*(L"ucsc\*(R", \*(L"refseq\*(R" or \*(L"ensembl\*(R" and Default to \*(L"ensembl\*(R".
.IP "\fIgversion\fR \fB(optional)\fR" 4
.IX Item "gversion (optional)"
Use this option to set the version of the genome from which the predefined region templates templates (with
\&\fIregion\fR) will be fetched. For human, it can be \*(L"hg18\*(R", \*(L"hg19\*(R". For mouse, it can be \*(L"mm9\*(R", \*(L"mm10\*(R". For rat,
it can be \*(L"rn5\*(R". For fly, it can be \*(L"dm3\*(R". For zebrafish, it can be \*(L"danRer7\*(R".
.IP "\fIsplicing\fR \fB(optional)\fR" 4
.IX Item "splicing (optional)"
Use this option with \fIsource\fR to determine whether the canonical or alternatively spliced transcripts will
be used for counting. It can be \*(L"canonical\*(R" or \*(L"alternative\*(R" and defaults to \*(L"canonical\*(R"
.IP "\fIsort\fR \fB(optional)\fR" 4
.IX Item "sort (optional)"
Use this option if you wish to sort the input files first. This is not obligatory as the new implementation
using the interval trees structure does not require sorting, however, it will run faster if the input files
are already sorted. If you wish to sort the files outside HTS::Tools::Count, in Linux systems, the command
should look like this:
.Sp
.Vb 1
\&    sort \-k1,1 \-k2g,2 inputfile > outputfile
.Ve
.Sp
In Windows systems, it would be better to use a spreadsheet program like Excel to perform sorting by 
columns. Both the input bed files and the region file should be sorted. If the structure of the region 
file is as described (1st column: chromosome, 2nd column: start 3rd column: end, 4th column: unique \s-1ID \s0
etc.) the sorting command is exactly the same as in common bed files (3 or 6 columns). Keep in mind that
in future versions, the \fIsort\fR parameter will be deprecated.
.IP "\fIpercent\fR \fB(optional)\fR" 4
.IX Item "percent (optional)"
Use this option to provide the overlaping coefficient according to which tags that partially fall outside 
provided genomic regions will be assigned to genomic regions. Defaults to 0.95 and is the default algorithm 
for assigning tags that fall partially inside provided genomic regions.
.IP "\fIlscore\fR \fB(optional)\fR" 4
.IX Item "lscore (optional)"
Use this option to use the linear probabilistic scoring scheme to address the problem of partial tag
overlap with the provided genomic regions. Please see header of the script file for description. Defaults 
to 0 (not use).
.IP "\fIescore\fR \fB(optional)\fR" 4
.IX Item "escore (optional)"
Use this option to use the exponential probabilistic scoring scheme to address the problem of partial tag
overlap with the provided genomic regions. Please see the \s-1SYNOPSIS\s0 section for a description. Defaults to 0
(not use).
.IP "\fIconstant\fR \fB(optional)\fR" 4
.IX Item "constant (optional)"
Use this option to provide the constant for the exponential scoring scheme (see description of \fIescore\fR
option). Defaults to 3.
.IP "\fIsmall\fR \fB(optional)\fR" 4
.IX Item "small (optional)"
Use this option if you wish to take into consideration genomic regions in your genomic regions file which 
are smaller than the tag length (rare but may occur, especially with customized genomic regions). Defaults 
to 0 (not use).
.IP "\fIsplit\fR \fB(optional)\fR" 4
.IX Item "split (optional)"
Use this option if you wish to further split your genomic regions in smaller areas. In this case, tags 
will be counted per area and the distribution of counts per area will be returned as a column in the 
output file. The argument is the length of sub-areas. The default is 1000 and splits the regions per 
1kb, unless the regions are smaller. In this case, the area will consist of only one sub-area of length 
equal to that of the area. Note also that when using this option, tags that are found inside sub-areas 
are not assigned to those sub-areas based on scoring schemes (options \fIpercent\fR, \fIlscore\fR and \fIescore\fR)
but tags are assigned based on the location of their center.
.Sp
Use this option if you wish to further split your genomic regions in a predefined number (nbins) of smaller
areas. The same things as in \fIsplit\fR apply.
.IP "\fIstats\fR \fB(optional)\fR" 4
.IX Item "stats (optional)"
Use this option to also return basic statistics of counts in the windows used returned by using \fIsplit\fR.
It should be set to 1 (defaults to 0).
.IP "\fIncore\fR \fB(optional)\fR" 4
.IX Item "ncore (optional)"
If the machine has multicore processor(s) and the package Parallel::ForkManager is installed, you can use
parallel processing. Default is 1 and can go up to 12.
.IP "\fIkeeporder\fR \fB(optional)\fR" 4
.IX Item "keeporder (optional)"
Use this parameter if you want to force the lines of the output counts table to be in the same order (e.g.
sorted per chromosome or gene name) as the region file. This is accomplished through the use of the module
Tie::IxHash::Easy which must be present in your machine. If the module is not present, the \fIkeeporder\fR
option is deactivated. Keep in mind that maintaining the order requires slighlty more memory during runtime.
.IP "\fIoutput\fR \fB(optional)\fR" 4
.IX Item "output (optional)"
A file to write the output to. If \*(L"auto\*(R", then it generates an automatic filename in the folder where the
input files are. If not provided, output is written to \s-1STDOUT.\s0
.IP "\fIsilent\fR \fB(optional)\fR" 4
.IX Item "silent (optional)"
Set this to 1 if you want to turn informative messages off.
.SH "OUTPUT"
.IX Header "OUTPUT"
A table-like test file containing the reads inside each genomic region for each input reads file.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
The HTS::Tools::Count object constructor. It accepts a set of parameters that are required to run the
counter and get the output.
.PP
.Vb 1
\&    my $counter = HTS::Tools::Count\->new({\*(Aqinput\*(Aq => \*(Aqmyfile.bed\*(Aq,\*(Aqregion\*(Aq => \*(Aqensembl_genes.txt\*(Aq});
.Ve
.SS "init($params)"
.IX Subsection "init($params)"
HTS::Tools::Count object initialization method. \s-1NEVER\s0 use this directly, use new instead.
.SS "run"
.IX Subsection "run"
The HTS::Tools::Count run subroutine. It runs the counter with the given parameters in the constructor.
.PP
.Vb 1
\&    $counter\->run;
.Ve
.SS "split_area"
.IX Subsection "split_area"
Creates the bins in the region file genomic regions. Internal use.
.PP
.Vb 1
\&    $counter\->split_area($area_start,$area_end,$bin_size);
.Ve
.SS "read_region_file"
.IX Subsection "read_region_file"
Region file parser and constructor of the internal hash representation. Requires Tie::IxHash::Easy.
Internal use.
.PP
.Vb 1
\&    $counter\->read_region_file($regionfile,[@input_files]);
.Ve
.SS "count_all_reads"
.IX Subsection "count_all_reads"
Wrapper for the main counting subroutine. Internal use.
.PP
.Vb 1
\&    $counter\->count_all_reads($region_structure,$region_counts,$split_counts,@input_files,[@input_files]);
.Ve
.SS "count_reads"
.IX Subsection "count_reads"
Single core main read counter. Internal use.
.PP
.Vb 1
\&    $counter\->count_reads($region_structure,$region_counts,$split_counts,$input_file,[$input_file]);
.Ve
.SS "count_reads_multi"
.IX Subsection "count_reads_multi"
Multiple core main read counter. Internal use.
.PP
.Vb 1
\&    $counter\->count_reads_multi($region_structure,$region_counts,$split_counts,$input_file,[$input_file]);
.Ve
.SS "write_reads"
.IX Subsection "write_reads"
Main output writer. Internal use.
.PP
.Vb 1
\&    $counter\->write_reads($region_structure,$region_counts,$split_counts,$input_file,[$input_file],$header);
.Ve
.SS "sort_inputs"
.IX Subsection "sort_inputs"
Helper sorting function for input files and region. Internal use.
.PP
.Vb 1
\&    $counter\->sort_inputs($region_file,@input_files);
.Ve
.SS "sort_one"
.IX Subsection "sort_one"
Helper sorting function. Internal use.
.PP
.Vb 1
\&    $counter\->sort_one($input_file);
.Ve
.SS "change_params"
.IX Subsection "change_params"
Massively change the parameters of an HTS::Tools::Count object.
.PP
.Vb 1
\&    $counter\->change_params({\*(Aqinput\*(Aq => \*(Aqanother_file\*(Aq,\*(Aqregion\*(Aq => \*(Aqmouse\-exon\*(Aq})
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Count object getter
.PP
.Vb 1
\&    my $param_value = $counter\->get("param_name")
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Count object setter
.PP
.Vb 1
\&    $counter\->set("param_name","param_value")
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Tie::IxHash::Easy (optional)
File::Sort (optional)
.PP
= head1 \s-1TODO\s0
.PP
Check how we can use gtf2tree.pl from the ngsplot package (https://code.google.com/p/ngsplot/)
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Count
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 176:" 4
.IX Item "Around line 176:"
Unknown directive: =nbins
