.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Motifscan 3"
.TH HTS::Tools::Motifscan 3 "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Motifscan \- A massive motif scanner (not finder!) for short genomic 
regions
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is a wrapper and significance threshold optimizer for several 
sequence motif scanners. At the present point, the scanners supported are 
pwmscan from the GimmeMotifs suite (van Heeringen and Veenstra, 2010) and 
MotifScanner (Thijs et al., 2001). Thus, the installation of these 3rd party 
tools in the system that uses HTS::Tools::Motifscan is necessary (or at least of
one of them). Then, the module runs a workflow which which massively scan the 
input fasta files (e.g. a set of sequences corresponding to ChIP-Seq peaks) for
the motifs given in the motif file in the form of positional weight matrices 
(e.g. motifs that have been characterized as significant during a de novo motif 
search in the same set of peaks). This workflow determines an optimal 
significance threshold based on a set of random background sequences selected 
from the background fasta file provided and on the false postive rate (fpr) 
provided. The module provides three basic outputs: a simple file with the number 
of hits of each motif in each input file, gff files with the hits and bed files 
with the hits, including also a significance score of the scan hit in the 5th 
column of the bed file.
.PP
.Vb 10
\&    use HTS::Tools::Motifscan;
\&    my %params = (
\&        \*(Aqinput\*(Aq => [\*(Aqnormal_nfkb_peaks.fa\*(Aq,\*(Aqcancer_nfkb_peaks.fa\*(Aq,
\&            \*(Aqmock_peaks.fa\*(Aq]
\&        \*(Aqmotif\*(Aq => \*(Aqmy_motif_matrices.pwm\*(Aq,
\&        \*(Aqscanner\*(Aq => \*(Aqpwmscan\*(Aq,
\&        \*(Aqbackground\*(Aq => \*(Aqbackground_sequences.tab\*(Aq,
\&        \*(Aqrange\*(Aq => 0.1:0.1:1,
\&        \*(Aqfpr\*(Aq => 0.05,
\&        \*(Aqtimes\*(Aq => 10,
\&        \*(Aqlength\*(Aq => 400,
\&        \*(Aqoutput\*(Aq => [\*(Aqgff\*(Aq,\*(Aqbed\*(Aq,\*(Aqstats\*(Aq]
\&    )
\&    my $motifscanner = HTS::Tools::Motifscan\->new(\e%params);
\&    $motifscanner\->run;
.Ve
.PP
The acceptable parameters are as follows:
.IP "\fIinput\fR \fB(required)\fR" 4
.IX Item "input (required)"
A set of input \s-1FASTA\s0 file(s) that will be used for matching of the motifs 
contained in \fImotif\fR file. Each of these files will be scanned using the 
scanner defined by \fIscanner\fR and the hits will be reported either as a simple 
tab-delimited stats file, a gff file, or a bed file under conditions (see below).
.IP "\fImotif\fR \fB(required)\fR" 4
.IX Item "motif (required)"
A file containing several motifs in the Position Weight Matrix (\s-1PWM\s0) format. The
file will be decomposed in several motifs and each motif will be matched against
each input \s-1FASTA\s0 file.
.IP "\fIbackground\fR \fB(optional)\fR" 4
.IX Item "background (optional)"
A \s-1FASTA\s0 file containing background sequences (must be at least the same length
as the input sequences) that will be used for random sampling to define a score
cutoff for motif matching significance based on \fIfpr\fR. It is required if the 
option \fIjustscan\fR is not activated.
.IP "\fIscanner\fR \fB(optional)\fR" 4
.IX Item "scanner (optional)"
A scanning algorithm to use. Currently, two algorithms are supported: the 
pwmscan algorithm (van Heeringen and Veenstra, 2010) and MotifScanner (Thijs et 
al., 2001).
.IP "\fIsigmethod\fR \fB(optional)\fR" 4
.IX Item "sigmethod (optional)"
It can be \*(L"bootstrap\*(R", \*(L"converge\*(R" or \*(L"none\*(R". If \*(L"bootstrap\*(R", the input sequence 
set is scanned using the \fIjustscan\fR threshold and the hits are counted. Then, 
using the same  threshold, \fItimes\fR background sequences of the same length are 
scanned and the number of hits is counted. The p\-value is the number of times 
that the number of hits is larger in the background than the input sequence set 
divided by \fItimes\fR. When \*(L"converge\*(R", the input sequences are scanned with 
\&\fIrange\fR thresholds until less hits remain in \fItimes\fR background  sequences 
until \fIfpr\fR is reached. If \*(L"none\*(R", then just a scan is performed with the 
\&\fIjustscan\fR threshold without any statistical significance. The default is 
\&\*(L"bootstrap\*(R".
.IP "\fIncore\fR \fB(optional)\fR" 4
.IX Item "ncore (optional)"
If the machine has multicore processor(s) and the package Parallel::Iterator is 
installed, you can use parallel processing when \fIsigmethod\fR is \*(L"bootstrap\*(R". 
Default is 1 and can go up to 12.
.IP "\fIrange\fR \fB(optional)\fR" 4
.IX Item "range (optional)"
A range of cutoffs that will be used to determine the final matching score 
cutoff corresponding to \fIfpr\fR. The range can be given in the form a:b or a:x:b 
where x is an increment step. If the format a:b is chosen, the default increment
is 1. However, in the latest versions of pwmscan, the matching score is 
normalized to one, so this notation will be eventually deprecated.
.IP "\fIfpr\fR \fB(optional)\fR" 4
.IX Item "fpr (optional)"
The desired False Positive Rate (\s-1FPR\s0), that is the percentage of motif matches 
found in the background sequences. Defaults to 0.05.
.IP "\fItimes\fR \fB(optional)\fR" 4
.IX Item "times (optional)"
How many times should the background set of sequences that will be used for the 
determination of the cutoff score from \fIrange\fR, be larger than the input set? 
It defaulta to 10, which means that if an input \s-1FASTA\s0 file contains 100 sequences, 
the background will contain 1000 random sequences.
.IP "\fIlength\fR \fB(optional)\fR" 4
.IX Item "length (optional)"
The length of the background sequences. Generally, it should be larger than the 
length of input sequences. It defaults to 400.
.IP "\fIoutput\fR \fB(optional)\fR" 4
.IX Item "output (optional)"
The output types that the user wished to get. It can be one or more of \*(L"stats\*(R" 
for a simple delimited file containing the hits for each motif and input file, 
\&\*(L"gff\*(R" for the gff output of pwmscan or a related file from MotifScanner, 
containing the actual hits and positions in the input sequences, or \*(L"bed\*(R" for an
output \s-1BED\s0 file containing the motif matches locations and a score to be used 
for coloring. The \*(L"bed\*(R" output is available only if a set of peak files is given
so as to determine the relative location of the match inside the peak and 
construct proper bed lines.
.IP "\fIbesthit\fR \fB(optional)\fR" 4
.IX Item "besthit (optional)"
The number of best hits to be retrieved when \fIscanner\fR is \*(L"pwmscan\*(R". Defaults 
to 1.
.IP "\fIuniquestats\fR \fB(optional)\fR" 4
.IX Item "uniquestats (optional)"
If the number of besthits is greater than 1, the specifying \fIuniquestats\fR to 1 
will cause the output \*(L"stats\*(R" file to contain unique hits. Like this you can 
avoid paradoxes like having more hits than input \s-1FASTA\s0 sequences. However, in 
some situations you might actually want to retrieve multiple hits.
.IP "\fIjustscan\fR \fB(optional)\fR" 4
.IX Item "justscan (optional)"
Set this to a real number between 0 and 1 (preferably close to 0.9), to just 
scan the input sequences using this score cutoff for the motifs without defining 
an \s-1FPR.\s0 Useful if you have a very limited number of input sequences (e.g. just 
one).
.IP "\fIcenter\fR \fB(optional)\fR" 4
.IX Item "center (optional)"
A set of genomic regions (e.g. peaks) with the \s-1SAME\s0 IDs as the input \s-1FASTA \s0
sequences (or a superset of these) which will be used to assign peak regions to 
\&\s-1FASTA\s0 files in order to determine the proper coordinates for the generation of 
\&\s-1BED\s0 output. It is optional, however, if \s-1BED\s0 output is requested, these files are 
not given, and the \s-1FASTA\s0 sequence length does not correspond to the length that 
can be extracted by the \s-1FASTA ID,\s0 the coordinates will be inaccurate.
.IP "\fIcolext\fR \fB(optional)\fR" 4
.IX Item "colext (optional)"
A vector of length 3, containing the column numbers of peak \s-1ID\s0 and peak summit,
and the length of the (possible) extension upstream and downstream of the peak 
summit. For example \fIcolext\fR 4 5 75.
.IP "\fIsilent\fR \fB(optional)\fR" 4
.IX Item "silent (optional)"
Use this parameter if you want to turn informative messages off.
.SH "OUTPUT"
.IX Header "OUTPUT"
The output of the module is a set of \s-1GFF\s0 files containing the hits for each 
motif and each input set of sequences, a statistics file with the number of hits
for each motif and input set of sequences and a set of \s-1BED\s0 files with the motif 
matches that can be used for display in a genome browser.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
The HTS::Tools::Motifscan object constructor. It accepts a set of parameters 
that are required to run the motifscanner and get the output.
.PP
.Vb 3
\&    my $motifscanner = HTS::Tools::Motifscan\->new({\*(Aqinput\*(Aq => [\*(Aqpeaks_1.fa\*(Aq,
\&        \*(Aqpeaks_2.fa\*(Aq],\*(Aqmotif\*(Aq => \*(Aqmy_motifs.pwm\*(Aq,\*(Aqscanner\*(Aq => \*(Aqpwmscan\*(Aq,
\&        \*(Aqjustscan\*(Aq => 1});
.Ve
.SS "init"
.IX Subsection "init"
HTS::Tools::Motifscan object initialization method. \s-1NEVER\s0 use this directly, use 
new instead.
.SS "run"
.IX Subsection "run"
The HTS::Tools::Motifscan run subroutine. It runs the motifscanner with the 
given parameters in the constructor.
.PP
.Vb 1
\&    $motifscanner\->run;
.Ve
.SS "parse_motifs"
.IX Subsection "parse_motifs"
Parse a file of PWMs and construct different files, specific for the scanner in 
use. Internal use.
.PP
.Vb 1
\&    $motifscanner\->parse_motifs($motifsfile,$scanner);
.Ve
.SS "construct_MS_background"
.IX Subsection "construct_MS_background"
Construct a set of background sequences, suitable to use with MotifSampler. 
Internal use.
.PP
.Vb 1
\&    $motifscanner\->construct_MS_background($backgroundfile);
.Ve
.SS "get_random_seq"
.IX Subsection "get_random_seq"
Get a random sequence from a set of background sequences.
.PP
.Vb 1
\&    $motifscanner\->get_random_seq($thefile,$itsindex,$howmany,$length,$num);
.Ve
.SS "write_seq"
.IX Subsection "write_seq"
Write a random sequence, randomly from a set of background sequences. Internal 
use.
.PP
.Vb 1
\&    $motifscanner\->write_seq($thefile,$theseqid,$theseq);
.Ve
.SS "convert2bed"
.IX Subsection "convert2bed"
Converts the gff output from pwmscan to bed format. The first column of the gff 
(that is the peak/region \s-1ID\s0) \s-1MUST\s0 contain coordinates information in the form 
chr:start\-end (track2fasta) or chr:start:end. \s-1WARNING\s0! If the fasta files used 
for scanning have been generated with a program like track2fasta from the 
GimmeMotifs suite, then the bed co-ordinates for each occurence can be correctly 
generated. If the sequence ids in the fasta files correspond to peak ids rather 
than exact sequence locations, another file with peak ids and peak centers must 
be provided. The function converts to 6 column bed files. It also converts the 
motif score in gff file to the 0\-1000 scale of \s-1UCSC\s0 genome browser so that motif 
strength can be visualized by color. This is done by linear conversion of the 
form new_value = a*old_value + b and by solving the special case of a 2x2 linear
system (since we know several of the values): 
min(score)*a + b = 0 max(score)*a + b = 1000
.PP
.Vb 1
\&    $motifscanner\->convert2bed($file_to_convert);
.Ve
.SS "naive_solve_two"
.IX Subsection "naive_solve_two"
Naive solution of a 2x2 system for proportionally scaling motif scores to \s-1BED \s0
scores. Internal use.
.PP
.Vb 1
\&    my ($x,$y) = $motifscanner\->naive_solve_two($minscore,$maxscore);
.Ve
.SS "build_index"
.IX Subsection "build_index"
Index a text file for quick access. Used internally to index the file of 
background sequences.
.PP
.Vb 1
\&    my $index = $motifscanner\->build_index(*DATAHANDLE,*INDEXHANDLE);
.Ve
.SS "get_indexed_line"
.IX Subsection "get_indexed_line"
Get the line of an indexed file. Returns line or undef if the requested line is 
out of range. Internal use.
.PP
.Vb 2
\&    my $iline = $motifscanner\->get_indexed_line(*DATAHANDLE,*INDEXHANDLE,
\&        $theline);
.Ve
.SS "create_output_file"
.IX Subsection "create_output_file"
Automatic creation of the output file name depending on the output type. 
Internal use.
.PP
.Vb 1
\&    my $name = $motifscanner\->create_output_file($thefile,$itstype,$itssubtype);
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Motifscan object getter.
.PP
.Vb 1
\&    my $param_value = $motifscanner\->get(\*(Aqparam_name\*(Aq)
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Motifscan object setter.
.PP
.Vb 1
\&    $motifscanner\->set(\*(Aqparam_name\*(Aq,\*(Aqparam_value\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, 
or through the web interface at 
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, 
and then you'll automatically be notified of progress on your bug as I make 
changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Motifscan
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 168:" 4
.IX Item "Around line 168:"
You forgot a '=back' before '=head1'
