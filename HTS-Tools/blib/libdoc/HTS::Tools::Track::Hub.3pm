.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Track::Hub 3"
.TH HTS::Tools::Track::Hub 3 "2015-09-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Track::Hub \- A massive motif scanner (not finder!) for short genomic regions
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module constructs a \s-1UCSC\s0 track hub using either a set of basic track hub parameters (e.g. the hub
base, the hub name and description etc.) together with a text tab delimited file with the tracks to be
generated and their properties (some are required, see HTS::Tools::Track::Signal), or with the use of
a single \s-1YAML\s0 file containing all the parameters required to build the hub
.PP
.Vb 6
\&    use HTS::Tools::Track::Hub;
\&    my %params = (
\&        \*(Aqconfig\*(Aq => \*(Aqtrackhub.yml\*(Aq
\&    )
\&    my $huber = HTS::Tools::Track::Hub\->new(\e%params);
\&    $huber\->run;
\&
\&    # OR
\&
\&    %params = (
\&        \*(Aqhubid\*(Aq => \*(Aqtest_hub\*(Aq,
\&        \*(Aqhubname\*(Aq => \*(AqA test hub\*(Aq,
\&        \*(Aqhubdesc\*(Aq => \*(AqA hub demonstrating HTS::Tools::Track::Hub\*(Aq,
\&        \*(Aqhubmail\*(Aq => hub_admin@trackhubs.org,
\&        \*(Aqhubbase\*(Aq => \*(Aq/the/public/html/directory/you/store/hubs\*(Aq,
\&        \*(Aqtracks\*(Aq => \*(Aq/the/tab/delimited/file/describing/tracks/and/options\*(Aq
\&    )
\&    my $huber2 = HTS::Tools::Track::Hub\->new(\e%params);
\&    $huber2\->run;
.Ve
.PP
The acceptable parameters are as follows:
.IP "\fIconfig\fR \fB(required)\fR" 4
.IX Item "config (required)"
A \s-1YAML\s0 file with the parameters of hub creation. It can look like the following:
.Sp
\&\s-1HUB_ID:\s0 test_hub
\&\s-1HUB_NAME:\s0 The first test hub
\&\s-1HUB_DESCRIPTION:\s0 This is the first hub made with HTS::Tools::Track::Hub module
\&\s-1HUB_BASE:\s0 /media/raid/tracks/test
\&\s-1HUB_MAIL:\s0 moulos@fleming.gr
\&\s-1TRACKS:
 TCF4:
 \s0 filename: /media/HD4/Fleming/play/trackhub_play/TCF4.bed
  source: bed
  destination: bigwig
  name: \s-1TCF4
 \s0 urlbase: http://epigenomics.fleming.gr/tracks/test
  description: \s-1TCF4\s0 ChIP-Seq signal
  color: 0,0,160
  maxHeightPixels: 128:64:16
  visibility: full
  boxedCfg: on
  autoScale: on
  group: user
  priority: auto
 TCF4_peaks:
  filename: /media/HD4/Fleming/play/trackhub_play/TCF4_peaks.bed
  source: bed
  destination: bigbed
  name: \s-1TCF4\s0 peaks
  urlbase: http://epigenomics.fleming.gr/tracks/test
  description: \s-1TCF4\s0 ChIP-Seq peaks
  color: 0,0,160
  maxHeightPixels: 128:64:16
  visibility: dense
  boxedCfg: on
  autoScale: on
  group: user
  priority: auto
 \s-1CON_BR1:
 \s0 filename: /media/HD4/Fleming/play/trackhub_play/CON_BR1.bam
  source: bam
  destination: bigwig
  name: \s-1CON BR1
 \s0 urlbase: http://epigenomics.fleming.gr/tracks/test
  description: \s-1CON\s0 RNA-Seq signal replicate 1
  color: 120,120,120
  maxHeightPixels: 128:64:16
  visibility: full
  boxedCfg: on
  autoScale: on
  group: user
  priority: auto
 \s-1DOX_BR1:
 \s0 filename: /media/HD4/Fleming/play/trackhub_play/DOX_BR1.bam
  source: bam
  destination: bigwig
  name: \s-1DOX BR1
 \s0 urlbase: http://epigenomics.fleming.gr/tracks/test
  description: \s-1DOX\s0 RNA-Seq signal replicate 1
  color: 0,160,0
  maxHeightPixels: 128:64:16
  visibility: full
  boxedCfg: on
  autoScale: on
  group: user
  priority: auto
.Sp
If config is given, no other parameters are required and if given, will be ignored.
.IP "\fIhubid\fR \fB(required)\fR" 4
.IX Item "hubid (required)"
The unique identifier of the hub to be created.
.IP "\fIhubname\fR \fB(optional)\fR" 4
.IX Item "hubname (optional)"
A short name for the hub to be created.
.IP "\fIhubdesc\fR \fB(optional)\fR" 4
.IX Item "hubdesc (optional)"
A longer description for the hub to be created.
.IP "\fIhubmail\fR \fB(required)\fR" 4
.IX Item "hubmail (required)"
The track hub admin e\-mail.
.IP "\fIhubbase\fR \fB(required)\fR" 4
.IX Item "hubbase (required)"
The public html directory where the hub will live.
.IP "\fItracks\fR \fB(required)\fR" 4
.IX Item "tracks (required)"
A text tab-delimited file containing information for the tracks that will be included in the track hub.
See also HTS::Tools::Track::Signal for details.
.IP "\fIsilent\fR \fB(optional)\fR" 4
.IX Item "silent (optional)"
Use this parameter if you want to turn informative messages off.
.SH "OUTPUT"
.IX Header "OUTPUT"
The output of the module is the track hub directory, properly structured and ready to be loaded in an
instance of the \s-1UCSC\s0 Genome Browser, as long as the hub base is public.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
The HTS::Tools::Track::Hub object constructor. It accepts a set of parameters that are required to run the
motifscanner and get the output.
.PP
.Vb 1
\&    my $huber = HTS::Tools::Track::Hub\->new({\*(Aqconfig\*(Aq => \*(Aqmyhub.yml\*(Aq});
.Ve
.SS "init"
.IX Subsection "init"
HTS::Tools::Track::Hub object initialization method. \s-1NEVER\s0 use this directly, use new instead.
.SS "run"
.IX Subsection "run"
The HTS::Tools::Track::Hub run subroutine. It runs the motifscanner with the given parameters in the 
constructor.
.PP
.Vb 1
\&    $huber\->run;
.Ve
.SS "read_yaml"
.IX Subsection "read_yaml"
Read the \s-1YAML\s0 file with all configurations for the hub creation.
.PP
.Vb 1
\&    my $config = $huber\->read_yaml($configfile);
.Ve
.SS "read_tab"
.IX Subsection "read_tab"
Read the tab-delimited file with all details regarding the tracks in the track hub.
.PP
.Vb 1
\&    my $tracks = $huber\->read_tab($trackfile);
.Ve
.SS "create_hub_tree"
.IX Subsection "create_hub_tree"
Create the hub tree directory structure.
.PP
.Vb 1
\&    my $file = $huber\->create_hub_tree($hubbase,$hubid);
.Ve
.SS "create_hub_file"
.IX Subsection "create_hub_file"
Create the hub description file.
.PP
.Vb 1
\&    my $file = $huber\->create_hub_file($hubbase,$hubid,$hubname,$hubdesc,$hubmail);
.Ve
.SS "create_genomes_file"
.IX Subsection "create_genomes_file"
Create the hub genomes file.
.PP
.Vb 1
\&    my $file = $huber\->create_genomes_file($hubbase,$hubgenomes);
.Ve
.SS "parse_track_line"
.IX Subsection "parse_track_line"
Parse a track line and create the corresponding trackDb elements.
.PP
.Vb 1
\&    my %trackopts = $huber\->parse_track_line($header);
.Ve
.SS "convert_genome"
.IX Subsection "convert_genome"
Convert between genomes (of the same organism) to create tracks for different genome versions. The
genome versions are the ones supported by HTS::Tools::Fetch.
.PP
.Vb 1
\&    my $file = $huber\->convert_genomes($track,$from,$to);
.Ve
.SS "create_track"
.IX Subsection "create_track"
Create the hub tracks using HTS::Tools::Track::Signal.
.PP
.Vb 1
\&    my ($track,$header) = $huber\->create_track($opts);
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Track::Hub object getter.
.PP
.Vb 1
\&    my $param_value = $motifscanner\->get(\*(Aqparam_name\*(Aq)
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Track::Hub object setter.
.PP
.Vb 1
\&    $motifscanner\->set(\*(Aqparam_name\*(Aq,\*(Aqparam_value\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Track::Hub
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 138:" 4
.IX Item "Around line 138:"
You forgot a '=back' before '=head1'
