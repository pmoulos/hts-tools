.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Normalize::Bedgraph 3"
.TH HTS::Tools::Normalize::Bedgraph 3 "2015-09-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Normalize::Bedgraph \- Normalize UCSC BedGraph files to a total signal
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module normalized a \s-1UCSC\s0 BedGraph signal file either to a total signal summed over the
entire genome or using some externally calculated normalization factors (e.g. from software
like DESeq or edgeR). This is a different normalization approach than read count downsampling
as it also takes into account read lenghts (downsampling read counts is not safe when there
are read of variable length as the removal of longer reads destroyes the uniformity of the 
process). The process is either to normalized the total signal sum over the genome to a given
constant (e.g. normalize signals of 1.2e+10 and 9.8e+8 to 1e+9) or use externally calculated
normalization factors such as the ones returned by the calcNormFactors function of the egdeR
Bioconductor package. The input is a set of BedGraph files and the output is the same set of
BedGraph files with normalized signal.
.PP
.Vb 9
\&    use HTS::Tools::Normalize::Bedgraph;
\&    my %params = (
\&        \*(Aqinput\*(Aq => [\*(Aqnormal_rnaseq_1.bedGraph\*(Aq,\*(Aqnormal_rnaseq_2.bedGraph\*(Aq,
\&            \*(Aqdisease_rnaseq_1.bedGraph\*(Aq,\*(Aqdisease_rnaseq_2.bedGraph\*(Aq],
\&        \*(Aqsumto\*(Aq => \*(Aq10000000000\*(Aq,
\&        \*(Aqexportfactors\*(Aq => \*(Aqnormfactors.txt\*(Aq
\&    )
\&    my $bg = HTS::Tools::Normalize::Bedgraph\->new(\e%params);
\&    $bg\->run;
.Ve
.PP
The acceptable parameters are as follows:
.IP "input \fB(required)\fR" 4
.IX Item "input (required)"
Input bedgraph file(s). Please be careful as there is checking whether the input
file(s) are indeed bedgraph files. It's ok if they contain more than 4 columns
but the first four must be bedgraph (chromosome, start, end, signal separated by
tabs). Input files need not to be sorted.
.IP "output \fB(optional)\fR" 4
.IX Item "output (optional)"
Output file names. It can be \*(L"stdout\*(R" for exporting to \s-1STDOUT,\s0 a set of file
names equal to the number of input files or nothing for the files to be
auto-generated.
.IP "sumto \fB(optional)\fR" 4
.IX Item "sumto (optional)"
Normalize to \-\-sumto total wig signal. Defaults to 1000000000. It is mutually
exclusive with \-\-extnorm with \-\-extnorm in precedence. It can be negative e.g.
for creating normalized stranded tracks where the minus strand shows negative
signal.
.IP "extnorm \fB(optional)\fR" 4
.IX Item "extnorm (optional)"
A set of external normalization factors (e.g. calculated from DESeq or edgeR).
It is mutually exclusive with \-\-sumto with \-\-extnorm in precedence.
.IP "exportfactors \fB(optional)\fR" 4
.IX Item "exportfactors (optional)"
Export normalization factors and signal sums to a file specified by the parameter.
.IP "perlonly \fB(optional)\fR" 4
.IX Item "perlonly (optional)"
Use pure Perl to run the script, otherwise, uses Linux awk. Useful for e.g.
Windows systems but slower.
.IP "prerun \fB(optional)\fR" 4
.IX Item "prerun (optional)"
If this switch is turned on, the script just counts the total wiggle signal in
the input files and prints it on the screen. This is useful in order for example
to determine the total normalization signal (sumto).
.IP "prerunlog \fB(optional)\fR" 4
.IX Item "prerunlog (optional)"
Writes the output of prerun option to a file specified by prerunlog. If only the
prerunlog is specified, prerun is assumed and executed automatically.
.IP "ncores \fB(optional)\fR" 4
.IX Item "ncores (optional)"
How many cores to use. Requires the presence of Parallel::Loops.
.IP "silent \fBoptional\fR" 4
.IX Item "silent optional"
Do not display verbose messages.
.SH "OUTPUT"
.IX Header "OUTPUT"
BedGraph files with normalized signal.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
The HTS::Tools::Normalize::Bedgraph object constructor. It accepts a set of parameters that are required to run the
counter and get the output.
.PP
.Vb 2
\&    my $bgnormer = HTS::Tools::Normalize::Bedgraph\->new({\*(Aqinput\*(Aq => (\*(Aqmyfile1.bedgraph\*(Aq,\*(Aqmyfile2.bedgraph\*(Aq),
\&        \*(Aqsumto\*(Aq => 5000000000});
.Ve
.SS "init($params)"
.IX Subsection "init($params)"
HTS::Tools::Normalize::Bedgraph object initialization method. \s-1NEVER\s0 use this directly, use new instead.
.SS "run"
.IX Subsection "run"
The HTS::Tools::Normalize::Bedgraph run subroutine. It runs the normalizer.
.PP
.Vb 1
\&    $bgnorm\->run;
.Ve
.SS "create_output_file"
.IX Subsection "create_output_file"
The HTS::Tools::Normalize::Bedgraph output filename creation subroutine. It constructs output filenames for
normalized bedgraphs if they are not provided.
.PP
.Vb 1
\&    $bgnorm\->create_output_file($infile);
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Normalize::Bedgraph object getter
.PP
.Vb 1
\&    my $param_value = $bgnorm\->get("param_name")
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Normalize::Bedgraph object setter
.PP
.Vb 1
\&    $bgnorm\->set("param_name","param_value")
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Normalize
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
