.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTS::Tools::Utils 3"
.TH HTS::Tools::Utils 3 "2015-09-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTS::Tools::Utils \- Helper functions for the HTS::Tools module
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module includes mostly helper functions which are commonly used within the HTS::Tools module
.PP
.Vb 1
\&    use HTS::Tools::Utils;
\&
\&    my $helper = HTS::Tools::Utils\->new();
\&    $helper\->now; # Current day and time formatted in a human readable format
\&    $helper\->now("machine"); # Same but in a machine friendly format, useful for naming files etc.
\&    
\&    my @array_without_duplicates = keys($helper\->unique(@array_with_duplicates));
\&
\&    my $median_absolute_deviation = $helper\->mad(@numerical_array);
\&
\&    my $nlines = $helper\->count_lines($filename);
\&    my $nlines = $helper\->count_lines($filehandle);
\&
\&    # ...and more helper functions, read the documentation...
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
All the functions in this module are exportable
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
Simple class constructor
.PP
.Vb 1
\&    my $helper = HTS::Tools::Utils\->new;
.Ve
.SS "set_logger($filename)"
.IX Subsection "set_logger($filename)"
Creates a logger object using Log::Log4perl and sends messages to a specific log file defined by the
calling module. Sets also the logger layout.
.PP
.Vb 1
\&    $helper\->set_logger("log.txt");
.Ve
.SS "now($format)"
.IX Subsection "now($format)"
Formats the current time in a human readable or machine friendly (just one string) format. \f(CW$format\fR
can be \*(L"human\*(R" (default) or \*(L"machine\*(R"
.PP
.Vb 2
\&    my $date_human = $helper\->now;
\&    my $date_machine = $helper\->now("machine");
.Ve
.SS "smatch($format)"
.IX Subsection "smatch($format)"
Check for the presence of a scalar (s) in an array. Added this function because of the
instability of the smart match (~~) operator among Perl versions. Caution! Case sensitive!
.PP
.Vb 3
\&    my $s = "something";
\&    my @a = ("something","something_else")
\&    my $found = $helper\->smatch($s,@a);
.Ve
.SS "unique(@array)"
.IX Subsection "unique(@array)"
Returns a hash whose keys are the unique elements of an array
.PP
.Vb 2
\&    my %uhash = $helper\->unique(@array);
\&    my @uniques = keys(%uhash);
.Ve
.SS "count_lines($file)"
.IX Subsection "count_lines($file)"
Counts the lines of a (non-binary) file
.PP
.Vb 1
\&    my $number_of_lines = $helper\->count_lines($file);
.Ve
.SS "count_unique_lines($file)"
.IX Subsection "count_unique_lines($file)"
Counts the unique lines of a (non-binary) file
.PP
.Vb 1
\&    my $uniqe_number_of_lines = $helper\->count_unique_lines($file);
.Ve
.SS "decide_header"
.IX Subsection "decide_header"
Parse the first line of a bed-like file and decide if it has a header line that describes each column or data start right away.
Internal use.
.PP
.Vb 1
\&    my $has_header = $helper\->decide_header($first_line);
.Ve
.SS "count_fasta($fasta_file)"
.IX Subsection "count_fasta($fasta_file)"
Counts the number of sequences in a \s-1FASTA\s0 file
.PP
.Vb 1
\&    my $number_of_seqs = $helper\->count_fasta($fasta_file);
.Ve
.SS "check_fasta($file)"
.IX Subsection "check_fasta($file)"
Quick (and dirty) check if the input file is a \s-1FASTA\s0 file
.PP
.Vb 1
\&    my $is_fasta = $helper\->check_fasta($file);
.Ve
.SS "check_tabseq($file)"
.IX Subsection "check_tabseq($file)"
Quick (and dirty) check if the input file is a tabular sequence file
.PP
.Vb 1
\&    my $is_tab = $helper\->check_tabseq($file);
.Ve
.SS "range_vector"
.IX Subsection "range_vector"
Create an expanded array from the numbers start, increment, end. MATLAB-like expansion.
.PP
.Vb 1
\&    my $array = $helper\->range_vector($start,$end,$inc);
.Ve
.SS "round($number)"
.IX Subsection "round($number)"
Scientifically rounds a number to the closest integer or to a real specified by \f(CW$digits\fR. Passing \f(CW$digits\fR is optional.
.PP
.Vb 1
\&    my $rounded = $helper\->round($real,2);
.Ve
.SS "mean(@array)"
.IX Subsection "mean(@array)"
Calculates the arithmetic mean of a numeric array
.PP
.Vb 1
\&    my $mean = $helper\->mean(@array);
.Ve
.SS "stdev(@array)"
.IX Subsection "stdev(@array)"
Calculates the standard deviation of a numeric array
.PP
.Vb 1
\&    my $stdev = $helper\->stdev(@array);
.Ve
.SS "median(@array)"
.IX Subsection "median(@array)"
Calculates the median of a numeric array
.PP
.Vb 1
\&    my $med = $helper\->median(@array);
.Ve
.SS "mad(@array)"
.IX Subsection "mad(@array)"
Calculates the median absolute deviation of a numeric array
.PP
.Vb 1
\&    my $MAD = $helper\->mad(@array);
.Ve
.SS "minmax(@array)"
.IX Subsection "minmax(@array)"
Returns the minimum and the maximum value of an arithmetic arraty
.PP
.Vb 1
\&    my $minmax = $helper\->minmax(@array);
.Ve
.SS "get_sys_sep"
.IX Subsection "get_sys_sep"
Returns the \s-1OS\s0 system path separator
.PP
.Vb 1
\&    my $sysep = $helper\->get_sys_sep;
.Ve
.SS "try_module($module)"
.IX Subsection "try_module($module)"
Checks if a required by the package module exists and dies with additional info in the case that the
module does not exist
.PP
.Vb 1
\&    my $exists = $helper\->try_module($module);
.Ve
.SS "swap(@array_two_members)"
.IX Subsection "swap(@array_two_members)"
Simply swaps the two first elements of an array, ignores the rest. It is intended to be used \s-1ONLY\s0 with
arrays with two elements.
.PP
.Vb 1
\&    my @swapped_array = $helper\->swap(@array);
.Ve
.SS "disp(@array_of_messages)"
.IX Subsection "disp(@array_of_messages)"
Simply displays a user-defined message in \s-1STDERR\s0 if verbosity is requested from a higher level. It also
prints messages to a log file handle, if requested from a higher level.
.PP
.Vb 1
\&    $helper\->disp("Hello world!");
.Ve
.SS "disp(@array_of_messages)"
.IX Subsection "disp(@array_of_messages)"
Prints some credits for the respective module
.PP
.Vb 7
\&    my $mod = "My::Module"
\&    my $ver = "0.01";
\&    my $auth = "John Doe";
\&    my $email = "john.doe\e@example.com"
\&    my $adtext = "My extraordinary module."
\&    my $helper = HTS::Tools::Utils\->new();
\&    $helper\->advertise($mod,$ver,$auth,$email,$adtext);
.Ve
.SS "count_hoh(%hash_of_hashes)"
.IX Subsection "count_hoh(%hash_of_hashes)"
Counts internal hash elements in a hash of hashes
.PP
.Vb 1
\&    $helper\->count_hoh(%complex_hash);
.Ve
.SS "catch_cleanup"
.IX Subsection "catch_cleanup"
Ctrl-C signal catcher that ensures removing of temporary directories. Never use this directly as it
will throw an error
.PP
.Vb 1
\&    SIG{INT} = sub { $helper\->catch_cleanup }
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
The cleanup function of the signal catcher
.PP
.Vb 1
\&    $helper\->cleanup
.Ve
.SS "waitbar_init"
.IX Subsection "waitbar_init"
Very simple waitbar inititation
.PP
.Vb 1
\&    $helper\->waitbar_init;
.Ve
.SS "waitbar_update"
.IX Subsection "waitbar_update"
Very simple waitbar progress
.PP
.Vb 1
\&    $helper\->waitbar_update($curr_iter,$total_length)
.Ve
.SS "sort_by_index"
.IX Subsection "sort_by_index"
Sort numeric array by index
.PP
.Vb 1
\&    $helper\->sort_by_index(@array);
.Ve
.SS "get"
.IX Subsection "get"
HTS::Tools::Utils object getter
.PP
.Vb 1
\&    my $param_value = $helper\->get("param_name")
.Ve
.SS "set"
.IX Subsection "set"
HTS::Tools::Utils object setter
.PP
.Vb 1
\&    $helper\->set("param_name","param_value")
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Panagiotis Moulos, \f(CW\*(C`<moulos at fleming.gr>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-hts\-tools at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTS\-Tools>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTS::Tools::Utils
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTS\-Tools>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/HTS\-Tools>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/HTS\-Tools>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/HTS\-Tools/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Panagiotis Moulos.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
